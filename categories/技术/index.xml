<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>技术 on Lean Max</title>
        <link>http://localhost:1313/categories/%E6%8A%80%E6%9C%AF/</link>
        <description>Recent content in 技术 on Lean Max</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Lean Max</copyright>
        <lastBuildDate>Fri, 22 Nov 2024 15:48:21 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C/C&#43;&#43;运行四个步骤</title>
        <link>http://localhost:1313/p/c/c-%E8%BF%90%E8%A1%8C%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/</link>
        <pubDate>Fri, 22 Nov 2024 15:48:21 +0800</pubDate>
        
        <guid>http://localhost:1313/p/c/c-%E8%BF%90%E8%A1%8C%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/</guid>
        <description>&lt;h1 id=&#34;cc运行的四个步骤&#34;&gt;C/C++运行的四个步骤
&lt;/h1&gt;&lt;p&gt;编写完成一个C/C++程序后，想要运行起来，必须要经过四个步骤：预处理、编译、汇编和链接。每个步骤都会生成对应的文件，如下图所示（注意后缀名）：
&lt;img src=&#34;http://localhost:1313/p/c/c-%E8%BF%90%E8%A1%8C%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/image.png&#34;
	width=&#34;1392&#34;
	height=&#34;169&#34;
	srcset=&#34;http://localhost:1313/p/c/c-%E8%BF%90%E8%A1%8C%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/image_hu3309922946344439354.png 480w, http://localhost:1313/p/c/c-%E8%BF%90%E8%A1%8C%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/image_hu2888482898228634156.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;823&#34;
		data-flex-basis=&#34;1976px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;预处理（Preprocess）：&lt;/strong&gt; 预编译把一些&lt;code&gt;#define&lt;/code&gt;的宏定义完成文本替换，然后将&lt;code&gt;#include&lt;/code&gt;的文件里的内容复制到&lt;code&gt;.cpp&lt;/code&gt;文件里，如果&lt;code&gt;.h&lt;/code&gt;文件里还有&lt;code&gt;.h&lt;/code&gt;文件，就递归展开。在预处理这一步，代码注释直接被忽略，不会进入到后续的处理中，所以注释在程序中不会执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译（Compile）：&lt;/strong&gt; 编译只是把我们写的代码转为汇编代码，它的工作是检查词法和语法规则，所以，如果程序没有词法或则语法错误，那么不管逻辑是怎样错误的，都不会报错。编译不是指程序从源文件到二进制程序的全部过程，而是指将经过预处理之后的程序转换成特定汇编代码(assembly code)的过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编（Assemble）：&lt;/strong&gt; 汇编过程将上一步的汇编代码(main.s)转换成机器码(machine code)，这一步产生的文件叫做目标文件(main.o)，是二进制格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链接（Link）：&lt;/strong&gt; C/C++代码经过汇编之后生成的目标文件(*.o)并不是最终的可执行二进制文件，而仍是一种中间文件(或称临时文件)，目标文件仍然需要经过链接(Link)才能变成可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;既然目标文件和可执行文件的格式是一样的（都是二进制格式），为什么还要再链接一次呢？&lt;br&gt;
因为编译只是将我们自己写的代码变成了二进制形式，它还需要和系统组件（比如标准库、动态链接库等）结合起来，这些组件都是程序运行所必须的。&lt;br&gt;
链接（Link）其实就是一个“打包”的过程，它将所有二进制形式的目标文件(.o)和系统组件组合成一个可执行文件。完成链接的过程也需要一个特殊的软件，叫做链接器（Linker）。&lt;br&gt;
此外需要注意的是：C++程序编译的时候其实只识别.cpp文件，每个cpp文件都会分别编译一次，生成一个.o文件。这个时候，链接器除了将目标文件和系统组件组合起来，还需要将编译器生成的多个.o或者.obj文件组合起来，生成最终的可执行文件(Executable file)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;references&#34;&gt;References
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/618037867&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/618037867&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>多态</title>
        <link>http://localhost:1313/p/%E5%A4%9A%E6%80%81/</link>
        <pubDate>Wed, 20 Nov 2024 15:12:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%A4%9A%E6%80%81/</guid>
        <description>&lt;h1 id=&#34;多态的定义&#34;&gt;多态的定义
&lt;/h1&gt;&lt;p&gt;“多态（英语：polymorphism），是指计算机程序运行时，相同的消息可能会送给多个不同的类别之对象，而系统可依据对象所属类别，引发对应类别的方法，而有不同的行为。简单来说，所谓多态意指相同的消息给予不同的对象会引发不同的动作称之。”其实更简单地来说，就是“在用父类指针调用函数时，实际调用的是指针指向的实际类型（子类）的成员函数”。多态性使得程序调用的函数是在运行时动态确定的，而不是在编译时静态确定的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python内存管理</title>
        <link>http://localhost:1313/p/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
        <pubDate>Tue, 19 Nov 2024 21:31:10 +0800</pubDate>
        
        <guid>http://localhost:1313/p/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;python的内存池机制&#34;&gt;Python的内存池机制
&lt;/h1&gt;&lt;h2 id=&#34;为什么要引入内存池&#34;&gt;为什么要引入内存池
&lt;/h2&gt;&lt;p&gt;当创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，致使效率降低。内存池的作用就是预先在内存中申请一定数量的，大小相等的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够之后再申请新的内存。这样做最显著的优势就是能够减少内存碎片，提升效率。&lt;/p&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image.png&#34;
	width=&#34;1686&#34;
	height=&#34;1408&#34;
	srcset=&#34;http://localhost:1313/p/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image_hu316941598588942303.png 480w, http://localhost:1313/p/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image_hu9329858548873378381.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;br&gt;
Python中有分为&lt;strong&gt;大内存&lt;/strong&gt;和&lt;strong&gt;小内存&lt;/strong&gt;：&lt;strong&gt;（256K为界限分大小内存）&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1、大内存使用malloc进行分配&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2、小内存使用内存池进行分配&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3、Python的内存池(金字塔)&lt;/strong&gt;&lt;br&gt;
  &lt;em&gt;&lt;strong&gt;第3层：&lt;/strong&gt;&lt;/em&gt; 最上层，对于python内置的对象（比如int,dict等）都有独立的私有内存池，对象之间的内存池不共享，即int释放的内存，不会被分配给float使用&lt;br&gt;
  &lt;em&gt;&lt;strong&gt;第2层：&lt;/strong&gt;&lt;/em&gt; 当申请的内存大小小于256KB时，内存分配主要由 Python 对象分配器（Python’s object allocator）实施&lt;br&gt;
  &lt;em&gt;&lt;strong&gt;第1层：&lt;/strong&gt;&lt;/em&gt; 当申请的内存大小大于256KB时，由Python原生的内存分配器进行分配，本质上是调用C标准库中的malloc/realloc等函数&lt;br&gt;
  &lt;em&gt;&lt;strong&gt;第0层：&lt;/strong&gt;&lt;/em&gt; 大内存&amp;mdash;&amp;ndash;若请求分配的内存大于256K，malloc函数分配内存，free函数释放内存。&lt;br&gt;
  &lt;em&gt;&lt;strong&gt;第-1，-2层：&lt;/strong&gt;&lt;/em&gt; 操作系统进行操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于释放内存方面，当一个对象的引用计数变为0时，Python就会调用它的析构函数。调用析构函数并不意味着最终一定会调用free来释放内存空间，如果真是这样的话，那频繁地申请、释放内存空间会使Python的执行效率大打折扣。因此在析构时也采用了内存池机制，从内存池申请到的内存会被归还到内存池中，以避免频繁地申请和释放动作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;references&#34;&gt;References
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6856235545220415496&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6856235545220415496&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>缓存（Cache）和缓冲（Buffer）的区别</title>
        <link>http://localhost:1313/p/%E7%BC%93%E5%AD%98cache%E5%92%8C%E7%BC%93%E5%86%B2buffer%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Wed, 23 Oct 2024 14:57:38 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%BC%93%E5%AD%98cache%E5%92%8C%E7%BC%93%E5%86%B2buffer%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;Buffer（缓冲区）：系统两端处理速度平衡（从长时间尺度上看）时使用的。它的引入是为了减小短期内突发I/O的影响，起到&lt;strong&gt;流量整形&lt;/strong&gt;的作用。比如生产者——消费者问题，他们产生和消耗资源的速度大体接近，加一个buffer可以抵消掉资源刚产生/消耗时的突然变化。&lt;/li&gt;
&lt;li&gt;Cache（缓存）：系统两端处理速度不匹配时的一种折衷策略。因为CPU和memory之间的速度差异越来越大，所以人们充分利用数据的局部性（locality）特征，通过使用存储系统分级（memory hierarchy）的策略来减小这种差异带来的影响。(浏览器预加载就是先将一部分资源存储在Cache中)&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>

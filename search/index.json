[{"content":"对Django的认识\rDjango是走大而全的方向，它最出名的是其全自动化的管理后台：只需要使用其ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。 Django内置的ORM跟框架内的其他模块耦合程度高。应用程序必须使用Django内置的ORM，否则就不能享受到框架内提供的种种基于其ORM的便利； Django适用的是中小型的网站，或者是作为大型网站快速实现产品雏形的工具。 Django模板的设计哲学是彻底的将代码、样式分离；Django从根本上杜绝在模板中进行编码、处理数据的可能。 Django，Flask和Tornado的对比\r框架定位\nDjango：全栈框架，功能全面，内置ORM、认证、后台管理等，适合中大型项目。 Flask：轻量微框架，灵活性高，适合小型应用和需要定制化的项目。 Tornado：异步Web框架，擅长高并发和实时通讯，适合实时系统和高并发场景。 开发效率\nDjango：内置功能多，开发效率高，但灵活性相对较低。 Flask：简洁灵活，开发者有更多技术选择空间，但需自行集成扩展。 Tornado：异步模式高效并发，但开发和调试复杂。 性能与适用场景\nDjango：适合企业级应用，性能一般，但可通过缓存等手段优化。 Flask：轻量，适合API和小型项目，需外部工具提升并发性能。 Tornado：异步架构，适合高并发、WebSocket等实时应用，性能最优。 总结\nDjango：适合功能复杂、需要快速开发的项目。 Flask：适合灵活定制的小型应用或微服务。 Tornado：适合高并发、实时通讯的系统。 Web服务器和Web框架的区别\rWeb服务器即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由Web框架来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。 Nginx是一个Web服务器，Django或flask就是Web框架。\n什么是WSGI,uWSGI,aWSGI？\rWSGI，Web服务器网关接口，是一种Web服务器网关接口，它是一个Web服务器（如Nginx，uWSGI等服务器）与Web应用（如Flask框架写的程序）通信的一种规范。当前运行在WSGI协议之上的Web框架有Bottle，Flask，Django uWSGI，是实现了WSGI协议的一个Web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的Web服务器，再加上Django这样的Web框架，就已经可以实现网站的功能了。 aWSGI，异步网关协议接口，一个介于网络协议服务和Python应用之间的标准接口，能够处理多种通用的协议类型，包括HTTP，HTTP2和WebSocket。 WSGI和ASGI的区别\rWSGI是基于HTTP协议模式的，不支持WebSocket，而ASGI的诞生则是为了解决Python常用的WSGI不支持当前Web开发中的一些新的协议标准。同时，ASGI对于WSGI原有的模式的支持和WebSocket的扩展，即ASGI是WSGI的扩展。\nDjango的生命周期\rwsgi,请求封装后交给web框架 （Flask、Django） 中间件，对请求进行校验或在请求对象中添加其他相关数据，例如：csrf、request.session 路由匹配,根据浏览器发送的不同url去匹配不同的视图函数 视图函数，在视图函数中进行业务逻辑的处理，可能涉及到：orm、templates =\u0026gt; 渲染 中间件，对响应的数据进行处理。 wsgi,将响应的内容发送给浏览器。 什么是FBV和CBV？\rFBV（function base views）： 基于函数的视图，就是在视图里使用函数处理请求。 CBV（class base views）： 基于类的视图，就是在视图里使用类处理请求。\nFBV\r就是使用了函数来处理用户的请求，查看以下实例：\n路由配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # urls.py urlpatterns = [ path(\u0026#34;login/\u0026#34;, views.login), ] # views.py from django.shortcuts import render,HttpResponse def login(request): if request.method == \u0026#34;GET\u0026#34;: return HttpResponse(\u0026#34;GET 方法\u0026#34;) if request.method == \u0026#34;POST\u0026#34;: user = request.POST.get(\u0026#34;user\u0026#34;) pwd = request.POST.get(\u0026#34;pwd\u0026#34;) if user == \u0026#34;runoob\u0026#34; and pwd == \u0026#34;123456\u0026#34;: return HttpResponse(\u0026#34;POST 方法\u0026#34;) else: return HttpResponse(\u0026#34;POST 方法1\u0026#34;) CBV\r基于类的视图，就是使用了类来处理用户的请求，不同的请求我们可以在类中使用不同方法来处理，这样大大的提高了代码的可读性。\n定义的类要继承父类 View，所以需要先引入库：\nfrom django.views import View 执行对应请求的方法前会优先执行 dispatch 方法(在get/post/put\u0026hellip;方法前执行)，dispatch() 方法会根据请求的不同调用相应的方法来处理。\n其实，在我们前面学到的知识都知道 Django 的 url 是将一个请求分配给可调用的函数的，而不是一个类，那是如何实现基于类的视图的呢？ 主要还是通过父类 View 提供的一个静态方法 as_view() ，as_view 方法是基于类的外部接口， 他返回一个视图函数，调用后请求会传递给 dispatch 方法，dispatch 方法再根据不同请求来处理不同的方法。\n路由配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # urls.py urlpatterns = [ path(\u0026#34;login/\u0026#34;, views.Login.as_view()), ] # views.py from django.shortcuts import render,HttpResponse from django.views import View class Login(View): def get(self,request): return HttpResponse(\u0026#34;GET 方法\u0026#34;) def post(self,request): user = request.POST.get(\u0026#34;user\u0026#34;) pwd = request.POST.get(\u0026#34;pwd\u0026#34;) if user == \u0026#34;runoob\u0026#34; and pwd == \u0026#34;123456\u0026#34;: return HttpResponse(\u0026#34;POST 方法\u0026#34;) else: return HttpResponse(\u0026#34;POST 方法 1\u0026#34;) 如何给CBV的程序添加装饰器？\r对单个方法使用装饰器：使用@method_decorator装饰get、post等方法。 1 2 3 4 5 6 7 8 9 from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic import View from django.http import HttpResponse class MyView(View): @method_decorator(login_required) def get(self, request, *args, **kwargs): return HttpResponse(\u0026#34;This is a protected view\u0026#34;) 对整个类视图使用装饰器：使用@method_decorator装饰dispatch方法，影响所有请求方法。 1 2 3 4 5 6 7 8 9 10 11 12 from django.utils.decorators import method_decorator from django.contrib.auth.decorators import login_required from django.views.generic import View from django.http import HttpResponse @method_decorator(login_required, name=\u0026#39;dispatch\u0026#39;) class MyView(View): def get(self, request, *args, **kwargs): return HttpResponse(\u0026#34;This is a protected view\u0026#34;) def post(self, request, *args, **kwargs): return HttpResponse(\u0026#34;This is a protected view for POST request\u0026#34;) 简述MVC和MTV\rMVC（Model View Controller 模型-视图-控制器）\r​ Web服务器开发领域里著名的MVC模式，所谓MVC就是把Web应用分为模型(M)，控制器(C)和视图(V)三层，他们之间以一种插件式的、松耦合的方式连接在一起，模型负责业务对象与数据库的映射(ORM)，视图负责与用户的交互(页面)，控制器接受用户的输入调用模型和视图完成用户的请求，其示意图如下所示：\nMVC模式示意图 M-\u0026gt;Model:模型，主要负责在数据库中对数据的存取操作 V-\u0026gt;View:视图，负责显示数据，通常是前端界面，如HTML页面、UI元素等。它接收用户输入并将其传递给Controller。 C-\u0026gt;Controller:控制器，充当Model和View之间的桥梁。它处理来自View的用户请求，调用Model中的业务逻辑，返回结果给View进行显示。 MTV（Model Templates View 模型-模板-视图）\rDjango的MTV模式本质上与MVC是一样的，也是为了各组件之间保持松耦合关系，只是在定义上有些不同，Django的MTV分别是：\nM-\u0026gt;模型(Model)：和MVC中的Model类似，处理与数据相关的内容，定义数据库的结构和操作方法 T-\u0026gt;模板(Template)：相当于MVC中的View，负责将数据呈现给用户。模板通过Django的模板语言生成动态HTML页面 V-\u0026gt;视图(View)：与MVC的Controller功能类似，负责处理用户请求和业务逻辑，调用Model获取数据，并将结果传递给Template进行渲染 还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应的Model和Template，MTV的响应模式如下所示：\nMTV模式示意图 ​ 一般是用户通过浏览器向我们的服务器发起一个请求(request)，这个请求回去访问视图函数，（如果不涉及到数据调用，那么这个时候视图函数返回一个模板也就是一个网页给用户），视图函数调用模型，模型去数据库查找数据，然后逐级返回，视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。\nMVC和MTV的区别\rMVC中的V的目的是呈现那个数据，而MTV的V的目的是数据如何呈现\n也就是把MVC中的View分成了视图（展现哪些数据）和模板（如何展现）2个部分，而Contorller这个要素由框架自己来实现了，我们需要做的就是把（带正则表达式的）URL对应到视图就可以了，通过这样的URL配置，系统将一个请求发送到一个合适的视图。\nDjango框架中配置url路由时name的作用\r主要是通过name的值，来查找url地址，可以理解为反射作用（别名）。在html模板中使用name来反射url优势就是后期url规则发生改变之后，只需调整urls.py即可，所有的模板文件都不需要修改。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # urls.py urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;sum/\u0026#39;, views.add, name=\u0026#34;add\u0026#34;), path(\u0026#39;get_url/\u0026#39;, views.get_url, name=\u0026#34;test\u0026#34;), path(\u0026#39;index/\u0026#39;, views.index), ] # views.py def add(request): return HttpResponse(\u0026#39;你访问了第一个url路由\u0026#39;) def get_url(request): # reverse()这个函数就是根据url路由的name参数，来反向获取url地址的方法 # 所以，url路由的name参数不仅仅可以在模板中使用{% url \u0026#39;add\u0026#39; %}，也可以在view.py中使用 result = reverse(\u0026#39;add1\u0026#39;, args=(123, 456)) return HttpResponse(result) 1 2 3 4 5 6 7 {# 上述使用name字段的url路由设置方法在html文件中的应用方式如下： #} {# url是固定写法，表示当前要加载的是url地址。\u0026#39;add\u0026#39;表示url路由对应的name参数值。 #} {# 要加载name=\u0026#34;add\u0026#34;的这个url地址。 #} \u0026lt;a href=\u0026#34;{% url \u0026#39;add\u0026#39; %}\u0026#34;\u0026gt;第一个url路由\u0026lt;/a\u0026gt; {# 通过name的值\u0026#34;add1\u0026#34;，反向获取带有参数的url地址 #} \u0026lt;a href=\u0026#34;{% url \u0026#39;add1\u0026#39; 10 25 %}\u0026#34;\u0026gt;计算\u0026lt;/a\u0026gt; 列举django的内置组件？\rDjango 是一个功能强大的全栈框架，提供了大量内置组件，帮助开发者快速构建和维护Web应用。这些内置组件涵盖了从数据管理、用户身份认证到安全性、性能优化等方面的需求。\n以下是 Django 的一些重要内置组件：\n1. 模型（Model）\rORM（Object-Relational Mapping）：Django 提供了内置的 ORM 系统，帮助开发者通过 Python 类定义数据库表结构，而不需要直接写 SQL。常用组件包括： models.Model：基础模型类。 字段类型：CharField，IntegerField，DateField 等。 关系字段：ForeignKey，ManyToManyField，OneToOneField。 2. 视图（View）\r基于函数的视图（FBV）：使用普通的 Python 函数处理 HTTP 请求，例如： 1 2 def my_view(request): return HttpResponse(\u0026#34;Hello, world!\u0026#34;) 基于类的视图（CBV）：提供了一系列通用视图类，简化了开发常见的视图逻辑： ListView：用于展示对象列表。 DetailView：展示单个对象的详细信息。 CreateView，UpdateView，DeleteView：处理对象的创建、更新、删除操作。 3. 模板引擎（Template Engine）\rDjango 内置了一个模板系统，允许开发者使用模板语言生成动态 HTML 页面。常用的模板标签和过滤器包括： 变量输出：{{ variable }} 控制结构：{% for item in list %} ... {% endfor %}，{% if condition %} ... {% endif %} 过滤器：{{ name|upper }}，{{ date|date:\u0026quot;Y-m-d\u0026quot; }} 4. URL 路由（URL Routing）\rDjango 提供了灵活的 URL 路由系统，允许开发者通过 urls.py 文件定义 URL 模式与视图函数的映射： 1 2 3 4 5 6 from django.urls import path from . import views urlpatterns = [ path(\u0026#39;home/\u0026#39;, views.home_view, name=\u0026#39;home\u0026#39;), ] 支持正则表达式匹配和命名路由。 5. 表单处理（Forms）\rDjango 提供了强大的表单处理组件，支持表单生成、验证、以及与模型的绑定。 forms.Form：手动定义表单结构。 forms.ModelForm：自动生成与模型关联的表单。 支持表单字段验证和错误处理。 6. 认证和授权系统（Authentication and Authorization）\rDjango 内置了完整的用户身份认证和权限管理系统： django.contrib.auth：提供用户模型、身份验证、权限、用户组等。 常用组件： User 模型：用于用户注册、登录。 LoginRequiredMixin：用于限制用户访问某些视图。 PermissionRequiredMixin：基于权限控制视图的访问。 7. 管理界面（Admin）\rDjango 内置了强大的后台管理界面，无需额外开发即可管理模型数据。 django.contrib.admin：自动生成管理后台，通过 admin.site.register 将模型注册到后台。 支持自定义表单、过滤器、搜索等功能。 8. 中间件（Middleware）\rDjango 提供了中间件机制，可以在请求和响应的处理过程中添加额外的逻辑。 常见的内置中间件包括： SecurityMiddleware：处理安全相关的功能（如强制 HTTPS）。 AuthenticationMiddleware：处理用户的身份认证。 SessionMiddleware：启用会话支持。 CommonMiddleware：处理URL重定向、内容长度等。 9. 消息框架（Messages Framework）\rDjango 的消息框架允许在不同请求之间传递一次性消息（如成功提示、错误消息）。 django.contrib.messages：常用于提示用户操作结果，如表单提交成功。 使用 messages.add_message 或 messages.success，messages.error 等方法显示消息。 10. 文件上传处理（File Handling）\rDjango 提供了简便的文件上传和处理机制。 FileField 和 ImageField：用于在模型中定义文件上传字段。 request.FILES：处理上传的文件。 11. 信号（Signals）\rDjango 提供了信号机制，允许在某些事件发生时触发特定的回调函数。 常用信号：pre_save，post_save，pre_delete，post_delete。 开发者可以使用信号来处理特定事件，如模型保存后执行额外逻辑。 说一下Django，MIDDLEWARES中间件的作用和应用场景？\r中间件是介于request与response处理之间的一道处理过程,用于在全局范围内改变Django的输入和输出。\n简单的来说中间件是帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作\n例如：\nDjango项目中默认启用了csrf保护,每次请求时通过CSRF中间件检查请求中是否有正确token值 当用户在页面上发送请求时，通过自定义的认证中间件，判断用户是否已经登陆，未登陆就去登陆。 当有用户请求过来时，判断用户是否在白名单或者在黑名单里 列举django中间件的5个方法？\r方法 作用 process_request(self, request) 主要方法。请求刚进来时，执行视图函数之前调用。(无return) process_view(self, request, callback, callback_args, callback_kwargs) URL路由匹配成功后，执行视图函数之前调用，拿到视图函数对象，及其所有参数。(无return) process_exception(self, request, exception) 执行视图函数中遇到异常时调用。(无return) process_template_response(self, request, response) 很少用。执行了render()渲染方法后调用。(有return) process_response(self, request, response) 主要方法。执行视图函数结束之后有响应时调用。(有return) References\rpython web框架django面试题 https://www.runoob.com/django/django-views-fbv-cbv.html Django简介与MTV模式 Django框架中配置url路由时name的作用 列举django中间件的5个方法？以及django中间件的应用场景？ ","date":"2024-10-13T21:57:51+08:00","permalink":"http://localhost:1313/p/django%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/","title":"Django面试题（一）"},{"content":"宇宙级免责声明\r本人无意泄露各高校试题，严格遵守任何保密协议，如有不妥随时私信，本人将立刻删除相关内容。本文章的所有内容都仅代表本人观点，如有不同观点，欢迎友善交流~\n写在前面\r关于信息差：保研是一场重大的信息差备赛，有的同学可能从大一刚入学就开始准备了，有的到大三下才真正开始了解保研（比如我），大三下开始会很吃亏！！规划的太晚，不清楚自己想走学术还是就业，没有及时套磁（很多三四月份甚至更早就开始联系导师了），总之早点确认自己的方向总不会错啦。这里也强烈推荐计算机保研er的破茧利器——全国最大非商业用爱交流计算机保研交流群（虽然潜水几个月lru了好几次hh，但是真心推荐！！） 关于套磁：其次就是要勇敢地去套磁，其实整个保研周期我的套磁都挺失败的，周围一套一个准，我套磁之前总会想着老师会不会嫌自己太菜、经历不匹配啥的，总之有点焦虑过头而错过了很多好时机（infj哭死），其实大家都差不多，甚至水平不如自己，勇敢冲就是了！ 关于海王：夏令营我的整体策略就四个字：多多益善。相较于担心老师那边不好回绝，在夏令营阶段更需要担心的是能否拿到一个保底的offer（大佬除外），也有部分提前套磁好的弱com的同学，自然也不必参加过多的夏令营，毕竟确实耗钱耗时间耗精力。当然，在有铁offer并且满意的前提下，也应该及时释放掉多余的offer，减少对老师招生带来的影响，也避免学弟学妹被拉入黑名单。 个人情况\r院校：次九 专业排名：SE，前2% 竞赛：非算法类竞赛若干，有果酱，没有牌子 科研：一段本校隐私计算方面的科研，B刊在投 工程：一段医学交叉的横向，从0到1搭起来的系统，比较solid，基本都能答上 外语：CET-6（不到500，和CET-4成绩相差巨大，是个雷点） 个人意向：70%就业向，title == 导师 \u0026gt; 方向 \u0026raquo; 地域，因为就业意向偏重，主要还是看导儿放不放实习 最终去向：清软专硕 前期准备\r前期主要是在各种文书的准备和无效套磁中（悲），套磁就不误人子弟了。文书方面主要包括了简历、个人陈述、PPT、套磁信、推荐信、中英文自我介绍、成绩单、排名证明……\n简历我这里用的是超级简历，当然也可以直接用word做，绿裙里有相关的模板可以拿来用，主要是要不断迭代完善，建议是保留好每一次的修改，我的简历从五月末到929已经出了15版，针对于每次面试老师偏好的点进行针对性修改完善，也伴随着可能出现科研成果上的更新而更新，并且一定要对简历上的每一个字负责，问穿就尴尬了。\n然后就是个人陈述，有一部分学校是要求提交个人陈述的，这个建议提前写好，一般学校也不会以此为参考，主要准备好500、1000和2000字三个版本，直接针对每个学校稍微改改交上去就好。\nPPT的话可以提前准备好一份，模块化处理，比如基本情况介绍可以1~2页，简单列一下rk、奖学金、竞赛之类的，然后项目经历每个3~4页，科研经历每个5~6页，针对每个学校的要求适当增删，套磁面试的时候一般不太卡时间，适当详细一点是没问题的。可以用本校的模板，也可以用面试学校的模板，但一定要做到整洁干净，不能太花哨，动画也建议少，以免播不出来出岔子。\n中英文自我介绍建议都准备1分钟、3分钟和5分钟版本的，一定要做到肌肉记忆般熟练，同简历一样，也要对自己说的每一句话有百分之一百的把握。\n推荐信的话并不是每个学校都需要，但是提前准备好总没错，一般是要两名职称副教授以上的（计算所需要两名教授职称的），建议直接找好两位教授，能要到电子签名最好（虽然一般不给）。\n夏令营情况\r整体来说，我的夏令营投递是偏保守的（真的很担心没保底），基本投了所有学校（但主要集中在华五），并且大部分都是学硕，导致整个七月份都是在奔波度过，下面就是我的夏令营基本情况。\n院校 入营情况 是否优营 备注 南大cs学硕 否 否 线上被刷 南大ai学硕 否 否 感觉和cs被刷有一定关系 南大se学硕 否 否 感觉和cs被刷有一定关系 人大gl学硕 否 否 本来也没抱啥希望 人大信院学硕 否 否 迷之bar。。。 复旦cs学硕 否 否 普信旦是这样的，后面紧急扩散了 北大软微 是 否 科研向了，拒绝了就包没优营的 武大cs学硕 是 是 上交电院se直硕 是 是 其实只有联培。。。 中科院计算所学硕 否（计算所霸面） 否 被三个组霸面，因为方向问题都拒了 中科院软件所学硕 是（和sjtu冲突） 否 中大cs学硕 是（和sjtu冲突） 否 科大网安学硕 是 是 人均优营，重要是双选，但是还是穿了 浙大CAD\u0026amp;CG 是 是 项目制考核，夏令营只有直博 哈工深CS学硕 否 否 今年bar很高 南大CS学硕\r南大今年开的很早，五月初就出结果了，但是南大需要先双机位通过线上测试才能够参加线下营，南大也是出了名的强com，试题的范围涉及很广，我甚至还提前一天去开了间酒店通宵复习408（血亏），结果今年考了不少编译原理和离散，这简直对我来说是天崩开局，因此也就无疾而终了。总之还是要感谢一下南大肯给我入营的机会，否则我的夏令营投递策略还会更加保守。\n（ps: 听说南大给的酒店巨好，可惜无福消受了555）\n人大信院学硕\r这我是万万没想到的，整个保研周期最让我感到震惊的bar，之前一直以为人大信院是个保底的存在，也联系好了一个评价巨好的老师，结果居然连营都没入，甚至老师都怀疑我是不是报错了，后面也替我亲自去问了教务（真的好感动），感觉是我整个保研过程中最看好我的老师了555。\n亲自问学院（好好的老师啊啊啊啊） 北大软微\r为了错峰出行，也为了进入梦校，软微我报了方向2，通过初筛后还有一轮论文筛，会给个list，其中挑一篇感兴趣的写一篇阅读报告，方向2感觉真的不太卷，而且和我本科研究方向比较契合，只要多看几遍论文，仔细写好阅读报告基本都能入。\n作为第一个线下营，上来就北大对我这个菜鸟十分不友好，提前一天就到了大兴，不得不说软微这个位置确实有点偏僻，校区也很小。\n软微校门 软微夏令营今年分为了三天，第一天是宣讲和各个方向的座谈会，后面两天笔试+面试，不过方向2人不算多，6号基本都结束了。\n笔试的难度不高，30min手撕三道，基本都能写出来。面试的话只能提交3页的pdf还是有点局促的，也算是最罕见的要求了，面试的老师都挺和蔼的，不会的话也不会过多为难，整体气氛十分欢快。\n后续：面试后陆续有三位老师联系了我，但知道了不放实习+本人想要尝试更多学校，和父母、学长仔细斟酌后还是放弃了offer（软微要承诺一定来才会发优营）。\nps：软微夏令营在科研向的道路上渐行渐远了，虽然也有羊导，但是今年方向2基本都是搞科研的了（毕竟报销学费）\n算是拒绝过北大的人了，老师也超nice的！！ 整体来说，软微的夏令营体验还是相当棒的，无论是入营礼包（T恤+饭票），还是没有架子的老师们，都给人一种额外的归属感。面试后我还去绕天安门附近夜骑了一圈，尝了卤煮（好吃嘿嘿）、豆汁儿（难以接受），这次首都之行还是很满意的！ 武大CS学硕\r武大夏令营开的算是不错的了，甚至提供两晚汉庭+包饭，离学校超近，校园也是超好看的（可惜樱花季已经过了）。\n武大校门 整体来说，夏令营时间安排挺紧凑的，第一天上午报到+宣讲，下午机试，因为早上要很早报到+中午没睡，下午脑子一团浆糊，机试五道题，涉及的算法还挺广的，最后就做出了一两道，其他纯在骗分，机试直接原地大爆炸。 第二天就只有面试了，面试是坐在大方桌的主持人座，老师在两侧，摄像机从对面录像，因为有了软微的经验，面试的整个过程还是相当顺利的，都是简历面，也基本都能答上来。\n傍晚的武大 后续：过了没几天发了优营名单，背景评估、机试分、面试分三者综合打出一个综合分，感觉算是十分公开透明的了（点赞）。我虽然在优营名单中，但志不在此，就没有去联系导师了。\n武大是我高考的梦校，尽管不是最终去向，但还是很感激武大能够给我这次机会~\n上交软院（智慧应用方向）\r上交CS直硕的bar一直很高，为了求稳我报了软院（但是软院感觉除了IPADS性价比都不高，但IPADS也是出了名的难）。\n上交软院在线下参营前会公布各个方向（线上宣讲）及其具体的入营任务，大多数是读论文，选定了论文就是选定了方向。后面还会有一次方向调整的机会，通过邮件的方式告诉你各个方向的竞争指数，为了错峰选了智慧应用，但是后来出了竞争指数智慧应用却是最高的（大家的想法都一样hh），不过后面还是头铁上了（懒得改了），结果到最后统计的时候智慧应用反而只剩七个了（博弈论算是玩明白了）。\n上交（闵行）校门 因为上交和武大只隔了一天，因此在武汉多住一晚后直接从武汉出发赶往上海了。上交软院夏令营是在闵行校区，感觉特别偏僻，周围配套还不是很完善，地铁站离学校还有一段距离，但学校大是真的大。\n夏令营分为了两天，考核是常规的机试+面试，但是机试很不常规，非OJ，一道超大模拟题，可以带一些离线资料（然并卵），最后提交一个压缩包上去。第二天面试，老师都挺好的，不会过多刁难你，印象里问了好多问题，有数据结构，也有简历面，不过论文倒是一点没问（奇怪）。\n在面试完后，有老师打电话给我，说我面试还不错，问我是否考虑，我当即答应了下来。不过上交得到九月才出名额，后面到了被告知这个方向只有联培了，遂作罢。\n整体来说，感觉上交硕士的本校保护很厉害，无论是宣讲还是最后的给的名额，给外校的基本都只有联培的名额（并非说联培不好，叠甲）。但是软院的招生老师还是很好滴，无论是前期的通知还是后续打电话问是否接受联培名额，整体给人的感觉很亲切负责。\n科大网安\r科大是出了名的对号入座，非CS的很难入CS营，又因为网安大部分老师是从6系和CS那边调过来的，方向没这么偏向安全，因此就报了网安。 科大的夏令营感觉是全场最佳了，酒店、大礼包、一百块的饭卡，还有超级盛大的开营仪式，而且全程有志愿者对接，简直仪式感拉满！！\n无敌的仪式感 夏令营分为了三天，第一天就是学校和各个学院的介绍+合影。第二天则是实验室介绍，如果打算来科大的千万要抓住这个机会，这不仅仅是参观，还要趁此机会加心仪实验室的联系方式，主动交流占坑。第三天的面试分为了上下午两场，一场十分钟，区别在于是否有英文问题，感觉更多是走个过场，不会过深挖掘。\n科大基本人均优营，没有效力，需要和老师完成双选才是铁offer，建议提前联系好导师面试，强导基本在夏令营开始前就被占满了，并且科大的预推免基本没有名额，得看鸽子（今年网安鸽子很多，到929都还有坑位）。\n科大的夏令营真的办得很棒，食宿、文创什么的都拉满了（据说书包还被倒卖出去不少hh），最后也联系上了导师，不过因为后面拿到了清软的offer就主动释放了。\n浙大CAD\u0026amp;CG\r浙大根据实验室不同，安排的项目考核时长也相应不同，有的长达两个月，有的可能就一个多星期（比如我们），考核内容基本是以论文复现为主，竞争总体不会特别激烈，因为只有外校的，并且到后面很多都坚持不下去。\nCAD\u0026CG CAD\u0026CG是在紫金港，是真的又大又好看（别人家的学校），实验室的师兄师姐和老师也很nice！！不过后面把我专业调剂了，并且和个人的规划方向不太相同，主动释放了offer。 预推免情况\r夏令营在拿到科大和浙大的铁offer后，预推免就能更大胆些了，目标就主要是一些夏令营没能入营与清北两所了。\n院校 是否入营 是否优营 备注 哈工深cs学硕 否 否 hitsz你拒我两次555 清华软院专硕 是 是 最终去向 清华深圳专硕 否 否 它甚至发拒信，哭死 复旦cs学硕 是 否 开摆 北大软微 否 否 今年大部分要跟实验室课题了，头铁网安方向，寄 北大深圳 否 否 没有套磁，意料之中 南大ai学硕 否 否 南大se学硕 是 否 准备清软，放弃入营 清华软院专硕\r这是我的预一营，最初我就是抱着报来试试的心态，没想到能够顺利入营，那时候高兴的要起飞了。招生老师也超级好，虽然没有建群，但是基本有求必应，并且所有通知都是邮箱短信双提醒（赞）。\n入营邮件 清华的前期流程算是比较复杂的了，需要老师在线填写推荐信（真的感觉很不好意思），别的按照要求填上就好。\n清软的考核分为了两天，第一天机试，可以带参考资料，我带了AcWing的模板，一共三题，第一题打卡题，第二题我用了模板很快也AC了，最后一题实在是想不出来了，罚坐（有大佬一个半小时结束战斗xm）。第二天面试，老师们都特别和蔼，不会刻意刁难，虽然我英文题爆炸了（被cue了六级），但是老师还是没有过多为难。\n虽然机试20%+面试80%，但是我感觉面试大家的差距不会很大，反而机试十分重要，占比是主要的，我也难得幸运了一次（开心），也可能是自己本身放低了预期，没想着能够进入清华，心态比较好吧hh\n复旦CS学硕\r在拿了清软的offer后，复旦就没有过多去准备了，第一天机试（5题），第二天英文面试（甚至单拎出来，就五分钟，可能这天更多是联系导师吧），第三天就是专业面试了（问了超多专业课，根本不会，感觉要把老师题库问完了，一直在看结束没xs）\n9.29终章\r9.28填好系统后，9.29就等清华发offer啦，虽然比别的学校都要晚点hh，但是等待是值得的~\n上岸咯 个人总结\u0026amp;建议\r上圣经！！\n保研圣经 关于心态：在拿到清软offer前，其实一直没有一个满意的offer，总是差点意思，这也导致了夏令营和预推免这段空档我并不轻松，时常会做噩梦惊醒。因此，我认为放平心态十分重要，我身边既有夏0营但最后保研华五的，也有拿着一堆夏令营但最后去向一般的，夏令营20%的人掌握了80%的offer，但最终只能留下一个，复旦在十月份还在紧急扩散呢，策略不同势必会导致不同的入营情况，没有必要去刻意地对比，查漏补缺，针对性补充完全来得及。 关于提前进组：整个保研周期从夏令营到9.29大概三个月，不算长，但真正的准备可能从大三上就开始了，提前进组实习能够十分有效提高你在保研的竞争力，如果恰好是弱com，那直接提前锁定了。 关于入营：选择性入营，选择大于努力，参加过多营的弊端很明显，耗时耗精力，更是没有时间去停下来反思总结，十分考验个人的调整能力，适当的放弃能更全身心地准备梦校。 关于机试：算法很重要，我算法从大三下开始，把leetcode hot100三刷，又在夏令营和预推免之间的空窗期把AcWing基础算法课刷完，其实整体是有点赶的，建议还是尽早做准备，算法无法一蹴而就。 关于面试：可以准备好简历带过去，建议穿的干净一点，面试过程中不卑不亢，自信而不失谦逊，言语铿锵有力，不必担心老师会瞧不上你的科研，也不应频繁打断老师提问，张弛有度、彬彬有礼即可。 关于人品：我认为在9.29前如果有心仪且铁offer时，应该把其他的offer及时释放掉，尽可能少的影响老师的招生，也能将offer给到有需要的人。 结语\r没有什么根本来不及，种一棵树最好的时候是十年前，其次是现在，我们需要的是更多勇气。\n在这里，我要感谢一路帮助我的老师、学长、同学、朋友们，精辟独到的建议指引我正确的方向，我也要感恩一直以来支持和鼓励我的父母和女朋友，在我最需要的时候出现在我身边，支撑着我坚持到最后！\n","date":"2024-10-13T14:29:12+08:00","permalink":"http://localhost:1313/p/%E4%BF%9D%E7%A0%94%E5%9B%9E%E5%BF%86%E5%BD%95/","title":"保研回忆录"},{"content":"My First Blog\rJust memory my first blog. Nothing else~\n","date":"2024-10-11T21:03:48+08:00","permalink":"http://localhost:1313/p/my-first-post/","title":"My First Post"}]